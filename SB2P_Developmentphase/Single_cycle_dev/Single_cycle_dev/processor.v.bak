module processor(clk, rst, PC);

	//inputs
	input clk, rst;
	
	//outputs
	output [9:0] PC;
	
	wire [31:0] instruction, writeData, readData1, readData2, extImm, ALUin2,ALUResult, memoryReadData;
	wire [15:0] imm;
	wire [5:0] opCode, funct;
	wire [4:0] rs, rt, rd, writeRegister;
	wire [2:0] ALUOp;
	wire RegDst, Branch, MemReadEn, MemtoReg, MemWriteEn, RegWriteEn, zero, PCsrc,JR_Signal,Jump,JAL_signal;
	wire [9:0] nextPC, PCPlus1, adderResult,jumpAddress,jumpRegisterAddress;
	wire [1:0] sel,ALUSrc;

	assign opCode = instruction[31:26];
	assign rd = instruction [15:11]; 
	assign rs = instruction[25:21]; 
	assign rt = instruction[20:16]; 
	assign imm = instruction[15:0];
	assign funct = instruction[5:0];
	assign jumpAddress = {PCPlus1[9:6], instruction[25:0], 2'b00};
	assign sel = (JR_Signal) ? 2'b11 :
              	 (Jump)      ? 2'b10 :
        	     (PCsrc)     ? 2'b01 : 
							   2'b00 ;
              	            
	programCounter pc(.clk(clk), .rst(rst), .PCin(nextPC), .PCout(PC));  
	
	adder PCAdder(.in1(PC), .in2(10'b1), .out(PCPlus1));//

	instructionMemory IM(.address(nextPC), .clock(clk), .q(instruction));
	
	controlUnit CU(.opCode(opCode), .funct(funct), 
				      .RegDst(RegDst), .Branch(Branch), .MemReadEn(MemReadEn), .MemtoReg(MemtoReg),
				      .ALUOp(ALUOp), .MemWriteEn(MemWriteEn), .RegWriteEn(RegWriteEn), .ALUSrc(ALUSrc),
					  .JAL_signal(JAL_signal),.Jump(Jump),.JR_Signal(JR_Signal));
	
	mux2x1 #(5) RFMux(.in1(rt), .in2(rd), .s(RegDst), .out(writeRegister));
	
	registerfile RF(.clk(clk), .rst(rst), .we(RegWriteEn), 
					    .readRegister1(rs), .readRegister2(rt), .writeRegister(writeRegister),
					    .writeData(writeData), .readData1(readData1), .readData2(readData2));
						 
	SignExtender SignExtend(.in(imm), .out(extImm));
	
	
	mux4_1 #(32) ALUMux(.IN0(readData2),.IN1(extImm),.IN2(32'b0),.IN3(),.S0(ALUSrc[0]),.S1(ALUSrc[1]),.OUT(ALUin2));  /// 

	ALU alu(.operand1(ALUin1), .operand2(ALUin2), .opSel(ALUOp), .result(ALUResult), .zero(zero));
	
	ANDGate branchAnd(.in1(zero), .in2(Branch), .out(PCsrc));
	
	adder branchAdder(.in1(PCPlus1), .in2(extImm[9:0]), .out(adderResult));   // 10 bits adder 
	
	dataMemory DM(.address(ALUResult[7:0]), .clock(~clk), .data(readData2), .rden(MemReadEn), .wren(MemWriteEn), .q(memoryReadData));
	
	//mux2x1 #(32) WBMux(.in1(ALUResult), .in2(memoryReadData), .s(MemtoReg), .out(writeData));

	//mux2x1 #(6) PCMux(.in1(PCPlus1), .in2(adderResult), .s(PCsrc), .out(nextPC)); 
	

	mux2x1 #(32) JAL(.in1(readData1), .in2(PCPlus1), .s(JAL_signal), .out(ALUin1));  // width 



	mux4_1 #(10) nextPc(.IN0(PCPlus1),.IN1(ALUResult),.IN2(jumpAddress),.IN3(jumpRegisterAddress),.S0(sel[0]),.S1(sel[1]),.OUT(nextPC));
	
	

endmodule
